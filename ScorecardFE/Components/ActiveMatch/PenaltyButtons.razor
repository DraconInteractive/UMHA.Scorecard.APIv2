<div class="row gx-4 mb" style="height: 50%">
    <div class="col-md-6">
        <button type="button" class="penalty-button @Style(0)" @onclick="() => ToggleButton(0)">Line Fault</button>
    </div>
    <div class="col-md-6">
        <button type="button" class="penalty-button @Style(1)" @onclick="() => ToggleButton(1)">Yellow Card</button>
    </div>
</div>
<div class="row gx-4 mb" style="height: 50%">
    <div class="col-md-6">
        <button type="button" class="penalty-button @Style(2)" @onclick="() => ToggleButton(2)">Red Card</button>
    </div>
    <div class="col-md-6">
        <button type="button" class="penalty-button @Style(3)" @onclick="() => ToggleButton(3)">Black Card</button>
    </div>
</div>

<style>
    .penalty-button {
        text-align: center;
        border: 1px solid black;
        border-radius: .25rem;
        width: 10vw;
        height: 3vw;
        background-color: white;
        color: #333;
        font-size: 1rem;
    }

    .penalty-button.r:hover {
        background-color: #f09aa2;
    }

    .penalty-button.r.pressed {
        background-color: #dc3545;
        color: white;
    }

    .penalty-button.b:hover {
        background-color: #88bbee;
    }

    .penalty-button.b.pressed {
        background-color: #3591ee;
        color: white;
    }

    @@media screen and (max-width: 900px) {
        .penalty-button {
            font-size: 0.75rem; /* adjust as needed */
        }
    }

    /* Smaller text size for smaller screens */
    @@media screen and (max-width: 768px) {
        .penalty-button {
            font-size: 0.5rem; /* adjust as needed */
        }
    }

    /* Even smaller text size for very small screens */
    @@media screen and (max-width: 480px) {
        .penalty-button {
            font-size: 0.35rem; /* adjust as needed */
        }
    }

</style>

@code {
    private bool[] buttonStates = new bool[4];

    private bool _isRed;
    public void SetTeam(bool isRed)
    {
        _isRed = isRed;
    }

    public void ToggleButton(int index)
    {
        if (index != -1 && buttonStates[index]) // If you selected an already selected button, deselect it
        {
            index = -1;
        }

        for (int i = 0; i < 4; i++)
        {
            buttonStates[i] = i == index;
        }

        StateHasChanged();
    }

    private string Style(int index)
    {
        string baseStr = _isRed ? "r" : "b";
        if (buttonStates[index])
        {
            baseStr += " pressed";
        }
        return baseStr;
    }

    public string Value()
    {
        string[] map = new string[4] { "Line Fault", "Yellow Card", "Red Card", "Black Card" };
        // horrible
        for (int i = 0; i < 4; i++)
        {
            if (buttonStates[i])
            {
                return map[i];
            }
        }
        return "Strike";
    }
}
