@using ScorecardAPI.Models;
@using ScorecardAPI.Models.DTO;
@using static ScorecardFE.Program;
@inject DataTransferService dataTransfer;

<br />
<table class="table">
    <thead>
        <tr>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var match in Tournament.Matches)
        {
            <tr>
                <td>
                    <div class="btn btn-outline-primary" @onclick="() => ToggleMatch(match.MatchId)">
                        @if (dataTransfer.Users == null || dataTransfer.Users.Length == 0)
                        {
                            <p>ID: @match.MatchId</p>
                        }
                        else
                        {
                            <p>@match.MatchId: @FighterName(match.FighterOneId) vs @FighterName(match.FighterTwoId)</p>
                        }
                    </div>
                    @if (IsMatchVisible(match.MatchId))
                    {
                        <MatchComponent Match="match" />
                    }
                </td>
            </tr>
            
        }
    </tbody>
</table>


@code {
    [Parameter] public TournamentOutputDTO Tournament { get; set; }

    private HashSet<int> visibleMatches = new HashSet<int>();

    private void ToggleMatch(int matchId)
    {
        if (!visibleMatches.Add(matchId))
        {
            visibleMatches.Remove(matchId);
        }
    }

    private bool IsMatchVisible(int matchId)
    {
        return visibleMatches.Contains(matchId);
    }

    private string FighterName(int userId)
    {
        return dataTransfer.Users.FirstOrDefault(x => x.UserId == userId).FirstName;
    }
}

