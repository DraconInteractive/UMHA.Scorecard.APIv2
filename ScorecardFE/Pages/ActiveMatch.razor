@page "/match/active/{MatchId}"
@using Newtonsoft.Json;
@using ScorecardAPI.Models;
@using ScorecardAPI.Models.DTO;
@using ScorecardFE.Components
@using ScorecardFE.Services
@using static ScorecardFE.Program;
@inject DataTransferService dataTransfer;
@inject ScreenDataService screenData;
@inject HttpClient Http;
@inject NavigationManager Nav;

<!-- Needs: Timer button -->
<div class="container-fluid mt-3">
    <div class="mb-2">
        <button type="button" class="back-home" @onclick="() => ToggleModal(true, backModalMessage)">Back to Match List</button>
    </div>

    <div class="row gx-5">
        <!-- Competitor Column -->
        <div class="col-lg-8 col-md-12 mb-3">
            <div class="row">
                <!-- Competitor 1 -->
                <div class="col-md-6 mb-3">
                    <!-- Score -->
                    <div class="card">
                        <div class="card-header card-header-custom f-red text-white">
                            @F1_Name
                        </div>
                        <div class="card-body card-body-custom">
                            <div class="score">@F1_Health</div>
                        </div>
                    </div>

                    <div style="height:1.5vh" />

                    <!-- Points -->
                    <div class="card">
                        <div class="card-body card-body-custom">
                            <h5 class="card-title">Points</h5>
                            <div style="height:10px"></div>
                            <ScorecardFE.Components.ActiveMatch.PointButtons @ref="redPoints" />
                            <div style="height:10px"></div>
                            <h5 class="card-title">Warnings & Penalties</h5>
                            <div style="height:15px"></div>
                            <ScorecardFE.Components.ActiveMatch.PenaltyButtons @ref="redPenalties" />
                        </div>
                    </div>
                </div>
                <!-- Competitor 2 -->
                <div class="col-md-6 mb-3">
                    <!-- Score -->
                    <div class="card">
                        <div class="card-header card-header-custom f-blue text-white">
                            @F2_Name
                        </div>
                        <div class="card-body card-body-custom">
                            <div class="score">@F2_Health</div>
                        </div>
                    </div>

                     <div style="height:1.5vh" />

                    <!-- Points -->
                    <div class="card">
                        <div class="card-body card-body-custom">
                            <h5 class="card-title">Points</h5>
                            <div style="height:10px"></div>
                            <ScorecardFE.Components.ActiveMatch.PointButtons @ref="bluePoints" />
                            <div style="height:10px"></div>
                            <h5 class="card-title">Warnings & Penalties</h5>
                            <div style="height:15px"></div>
                            <ScorecardFE.Components.ActiveMatch.PenaltyButtons @ref="bluePenalties" />
                        </div>
                    </div>
                </div>
            </div>
            <!-- Add Exchange -->
            <button type="button" @onclick="() => AddEvent()" class="add-exchange">Add Exchange</button>
        </div>
 
        <!-- Detail Column -->
        <div class="col-lg-3 col-md-12">
            <!-- Match Details -->
            <div class="card mb">
                <div class="card-body">
                    <h5 class="card-title">Match Details</h5>
                    <h6 class="card-title">Pool @Pool | Match @MatchCurrent / @MatchTotal</h6>
                    <div style="height: 3.25vh;" />
                    <h6 class="card-title">Winner</h6>
                    @if (F1_Health > F2_Health)
                    {
                        <div class="winner-indicator red">Red</div>
                    }
                    else if (F2_Health > F1_Health)
                    {
                        <div class="winner-indicator blue">Blue</div>
                    }
                    else
                    {
                        <div class="winner-indicator draw">Draw</div>
                    }
                </div>
            </div>
            <!-- Time Remaining -->
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Time Remaining</h5>
                    <div style="height: 1vh" />
                    <div class="d-flex justify-content-between align-items-center">
                        <button type="button" class="btn timer-button">-5</button>
                        <button type="button" class="btn match-timer" onclick="() => ToggleTimer()">@TimerStr</button>
                        <button type="button" class="btn timer-button">+5</button>
                    </div>
                    <div style="height: 1.5vh" />
                    <div class="d-flex justify-content-between align-items-center">
                        <button type="button" class="btn timer-button long">Reset</button>
                        <button type="button" class="btn timer-button long">Time Hold</button>
                    </div>
                </div>
            </div>
            <!-- Upcoming Matches -->
            <div class="card mt">
                <div class="card-body">
                    <h5 class="card-title">Upcoming Matches</h5>
                    <div class="upcoming-matches mt-3">
                        <p></p>
                        <p>@Upcoming1</p>
                        <p>@Upcoming2</p>
                    </div>
                </div>
            </div>
            <!-- Debug -->
            <div class="card mt">
                <div class="card-body d-flex justify-content-center">
                    <button type="button" class="btn btn-primary mt-2 mb-2">Debug: Setup From Match</button>
                </div>
            </div>

        </div>
    </div>

    <div style="height:50px"></div>
    <!-- Point Deductions / Match Events -->
    <h5>Match Events</h5>
    <div style="height:10px"></div>
    <!-- Events Container -->
    <div class="card c-border-dark">
        <div class="card-body event-container p-2">
            <div class="row">
                @foreach (var evt in TestEvents)
                {
                    <ScorecardFE.Components.ActiveMatch.Event MatchEvent="evt" OnRemove="(e) => RemoveEvent(e)" />
                }
            </div>
        </div>
    </div>

    <div style="height:50px"></div>

    <div style="height:50px"></div>
    <!-- Modal, currently hidden -->

    <div style="display:block">
        <Modal @ref="modal"></Modal>
        <button style="width: 100%" @onclick="() => ToggleModal(true, modalTestMessage)">Open Modal</button>
    </div>

    <div style="height:50px"></div>

</div>

<div class="card mt-3">
    <h5 class="card-header">Notes</h5>
    <p class="card-body" style="white-space: pre-wrap">
        - Add option to clear last exchange (done)
        - Remove point association with penalties (done)
        - Fix the timer area (done)
        - Start implementing 'setup from match', instead of purely dynamic variables
        - Add start / stop buttons for matches
        - Auto stop match on no health or time out
        - Add tournament setup rule for whether points can go negative
        - Display event time as seconds from match start
        - Track doubles (where a double is a strike event where both fighters have health reductions)
        Regarding tournament generation
        - Add / Remove people from pools and regenerate
    </p>
</div>

<div style="height:50px"></div>

<style>
    .card {
        margin: 0;
        padding: 0;
    }

    .card-title {
        text-align: center;
    }

    .card-header-custom {
        background-color: #f8f9fa; /* Light gray background to match the header */
        border-bottom: none;
        font-size: 1.25rem; /* Adjust font size if needed */
        color: #333; /* Dark text color */
        text-align: center;
    }

    .card-body {
        background-color: #f8f9fa;
        color: #333;
        margin: 0; /* Remove margin */
        padding: 1rem; /* Add padding to inner card-body */
    }

    .card-body .event-fighter {
        text-align: center;
    }

    .card-body-custom {
      padding: 1.5rem 1rem;
      text-align: center;
    }

    .card-body-custom .score {
        font-size: 4rem; /* Larger font size for the score */
        color: #333; /* Dark text color */
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .card-body-custom .penalties {
        color: #6c757d; /* Muted text color for penalties */
        font-size: 1rem;
    }

    .f-red {
      background-color: #dc3545; /* source of truth for red */
    }

    .f-blue {
      background-color: #0d6efd; /* source of truth for blue */
    }

    .f-border-red {
        border-color: #dc3545;
    }

    .f-border-blue {
        border-color: #0d6efd;
    }

    .c-border-dark {
        border-color: #333;
    }

    .match-detail {
      margin-bottom: 1rem;
    }

    .winner-indicator,
    .add-exchange {
      padding: 0.75rem;
      text-align: center;
      color: #333;
      margin-left: 0.25rem;
      margin-right: 0.25rem;
      border: 1px solid rgba(0,0,0,.125);
      border-radius: .25rem
    }

    /* Time remaining box items*/
    .match-timer,
    .timer-button {
        text-align: center;
        border: 1px solid rgba(0,0,0,.25);
        border-radius: .25rem;
        height: 100%;
        margin-left: 0.5rem;
        margin-right: 0.5rem;
    }

    .match-timer {
        background-color: #ffe66d;
        width: 100%;
    }

    .timer-button {
        background-color: white;
        width:25%;
    }

    .timer-button.long{
        width: 50%;
    }

    .winner-indicator {
        background-color: white;
    }

    .winner-indicator.red {
         background-color: #ff6b6b;
    }

    .winner-indicator.blue {
        background-color: #48a1ff;
    }

    .winner-indicator.draw{
        background-color: white;
    }

    .add-exchange {
        background-color: rgba(0,175,0,.4);
        width: 100%;
    }

    .back-home {
        background-color: white;
        padding: 0.75rem;
        text-align: center;
        color: gray;
        margin: 0.25rem;
        border: none;
        border-radius: .25rem;
    }

    .back-home:hover {
        color: black;
    }

    .upcoming-matches {
      padding: 0.5rem 1rem;
      background-color: white;
      border: 1px solid #ddd;
      margin-top: 1rem;
    }

    .event-container {
        overflow-y: auto;
        max-height: 60vh;
    }

    .mb {
        margin-bottom: 15px;
    }

    .mt {
        margin-top: 10px;
    }

    .mtp {
        margin-top: 5px;
    }

    @@media screen and (max-width: 768px) {
    .card-body-custom {
        padding: 1rem;
    }

    .card-title, .card-header-custom {
        font-size: 1rem;
    }

    .score {
        font-size: 3rem;
    }

    .add-exchange, .back-home {
        padding: 0.5rem;
        font-size: 0.9rem;
    }

    .timer-button {
        margin-left: 0.25rem;
        margin-right: 0.25rem;
    }

    .timer-button.long {
        width: 45%;
    }

    /* Additional responsive styles as needed */
}
</style>

@code {
    [Parameter]
    public string? MatchId { get; set; }

    private TournamentOutputDTO[]? tournaments;

    private const int RefreshInterval = 5000;

    // Displays
    public int Pool;
    public int MatchCurrent, MatchTotal;
    public string? F1_Name, F2_Name;
    public int F1_Health, F2_Health;

    public string? Upcoming1, Upcoming2;

    //Timer
    private System.Threading.Timer timer;
    private TimeSpan TimeRemaining = TimeSpan.FromMinutes(1);
    private string TimerStr => $"{TimeRemaining.Minutes:D2}:{TimeRemaining.Seconds:D2}";
    private bool timerPaused;

    // Events
    public List<MatchEvent>? TestEvents;
    private int maxEvents = 20;

    // Modal
    private Modal? modal;
    private bool showModal;
    private string modalTestMessage = "This is hopefully multi-line content.<br />Like this! ";
    private string backModalMessage = "This isn't available yet, soon though!";

    // Point / Penalty Buttons
    private Components.ActiveMatch.PointButtons redPoints, bluePoints;
    private Components.ActiveMatch.PenaltyButtons redPenalties, bluePenalties;

    protected override async Task OnInitializedAsync()
    {
        timerPaused = true;
        timer = new System.Threading.Timer(TimerCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        F1_Health = 10;
        F2_Health = 10;
        TimeRemaining = new TimeSpan(0, 25, 0);
        Upcoming1 = "Jim Campbell (Red) vs Josh Fisher (Blue)";
        Upcoming2 = "Jacinta Reynolds (Red) vs Luke Tornilla (Blue)";
        MatchCurrent = 1;
        MatchTotal = 25;
        F1_Name = "Lee North";
        F2_Name = "Peter Carey";
        TestEvents = new List<MatchEvent>();

        screenData.RegisterData("ActiveMatch", "ShowModal", new ScreenData_Bool() { Value = false });
        await FetchData();

        StateHasChanged();

        SetupPointsAndPenalties();

        Tick();
        Demo();
        Refresh();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task Tick ()
    {

    }

    private async Task Refresh()
    {
        await Task.Delay(RefreshInterval);

        await FetchData();
        StateHasChanged();

        string path = new Uri(Nav.Uri).AbsolutePath;
        bool isPageActive = path.Equals($"/match/{MatchId}", StringComparison.OrdinalIgnoreCase);
        if (isPageActive)
        {
            Refresh();
        }
    }

    private async Task SetupFromMatch (Match match)
    {
        F1_Health = match.FighterOneHealth;
        F2_Health = match.FighterTwoHealth;
        TimeRemaining = TimeSpan.FromMinutes(match.Duration);
        timerPaused = true;
    }

    private async Task Demo ()
    {
        Pool++;
        if (Pool > 3) { Pool = 0; }

        MatchCurrent++;
        if (MatchCurrent > MatchTotal)
        {
            MatchCurrent = 1;
        }

        StateHasChanged();

        await Task.Delay(2000);

        Demo();
    }

    private async Task FetchData()
    {
        int parsedID = int.Parse(MatchId);

        string tournamentJson = await Http.GetStringAsync($"api/tournament");
        tournaments = JsonConvert.DeserializeObject<TournamentOutputDTO[]>(tournamentJson);

        dataTransfer.Tournaments = tournaments;
    }

    public void AddEvent ()
    {
        if (TestEvents?.Count > maxEvents)
        {
            TestEvents.Clear();
            StateHasChanged();
        }

        int redPoint = redPoints.Value();
        int bluePoint = bluePoints.Value();
        string redEvt = redPenalties.Value();
        string blueEvt = bluePenalties.Value();

        bool redPenalty = redEvt != "Strike";
        bool bluePenalty = blueEvt != "Strike";

        // I think events need to not have a single type, but essentially two events - one for red one for blue
        string evt = redPenalty ? redEvt : bluePenalty ? blueEvt : "Strike";
        TestEvents?.Add(new MatchEvent()
        {
            EventType = evt,
            FighterOneReduction = redPoint,
            FighterTwoReduction = bluePoint,
        });

        redPoints.ToggleButton(-1);
        bluePoints.ToggleButton(-1);
        redPenalties.ToggleButton(-1);
        bluePenalties.ToggleButton(-1);

        StateHasChanged();
    }

    public void RemoveEvent(MatchEvent evt)
    {
        if (TestEvents.Contains(evt))
        {
            TestEvents.Remove(evt);
        }
        StateHasChanged();
    }

    public void ToggleModal (bool state, string message)
    {
        if (modal != null)
        {
            modal.Toggle(state, message);
        }
        StateHasChanged();
    }

    public async Task SetupPointsAndPenalties ()
    {
        while (redPoints == null || bluePoints == null || redPenalties == null || bluePenalties == null)
        {
            await Task.Delay(50);
        }

        redPoints.SetTeam(true);
        bluePoints.SetTeam(false);
        redPenalties.SetTeam(true);
        bluePenalties.SetTeam(false);
        StateHasChanged();
    }

    private void ToggleTimer ()
    {
        timerPaused = !timerPaused;
    }

    private void TimerCallback(object? state)
    {
        if (!timerPaused)
        {
            if (TimeRemaining.TotalSeconds > 0)
            {
                TimeRemaining = TimeRemaining.Add(TimeSpan.FromSeconds(-1));
                InvokeAsync(() => StateHasChanged());
            }
            else
            {
                timerPaused = true;
                OnTimerFinished();
            }
        }
    }

    private void OnTimerFinished ()
    {
        
    }
}
