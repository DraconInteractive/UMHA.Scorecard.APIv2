@page "/users"

@using ScorecardAPI.Models.DTO
@using ScorecardAPI.Models
@using static ScorecardFE.Program;

@inject HttpClient Http;
@inject DataTransferService dataTransfer;
@inject NavigationManager Nav;

<PageTitle>UMHA Members</PageTitle>

<h1>UMHA Members</h1>

@if (users == null || users.Length == 0)
{
    <p><em>Loading...</em></p>
}

<table class="table">
    <thead>
        <tr>
            <th>UID</th>
            <th>First Name</th>
            <th>Last Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>
                    <button class="btn btn-primary" @onclick="@(() => NavigateToUser(user))">
                        @user.UserId
                    </button>
                </td>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private User[]? users;

    private const int RefreshInterval = 2500;

    public string? debug;
    public int refreshCount = 0;

    protected override async Task OnInitializedAsync()
    {
        users = Array.Empty<User>();
        debug = "Debug: ";
        await GetUsers();
        StateHasChanged();
        RefreshData();
    }

    private async Task RefreshData ()
    {
        await Task.Delay(RefreshInterval);
        refreshCount++;
        await GetUsers();
        StateHasChanged();
        string path = new Uri(Nav.Uri).AbsolutePath;
        bool isUsersPageActive = path.Equals("/users", StringComparison.OrdinalIgnoreCase);
        if (isUsersPageActive)
        {
            RefreshData();
        }
    }

    private void NavigateToUser (User user)
    {
        dataTransfer.targetUser = user;
        Nav.NavigateTo($"/users/{user.UserId}");
    }

    private async Task GetUsers ()
    {
        try
        {
            //"https://umha.api.dracon.au"
            users = await Http.GetFromJsonAsync<User[]>("api/users");
            debug = await Http.GetStringAsync("api/users");
        }
        catch (Exception e)
        {
            debug = "Debug: " + e.Message;
        }
    }
}
